/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import dataset.Database.DB;
import dataset.Dataset;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JSpinner;
import javax.swing.SpinnerListModel;
import javax.swing.SpinnerModel;
import javax.swing.*;
 import java.awt.Checkbox;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.concurrent.TimeUnit;

/**
 *
 * @author lekhika
 */
public class IpFrame extends javax.swing.JFrame{

    /**
     * Creates new form IpFrame
     */
    
    public IpFrame(){
        /*String[] hhStrings = {"00","01"}; //get month names
        SpinnerListModel monthModel = null;
        monthModel = new CyclingSpinnerListModel(hhStrings);
        JSpinner hSpinner = addLabeledSpinner(this,"HH :",monthModel);*/
        initComponents();
        
        udpC.setEnabled(false);
        tcpC.setEnabled(false);
        icmpC.setEnabled(false);
        ipoC.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionsGroup = new javax.swing.ButtonGroup();
        protocolP = new javax.swing.JPanel();
        arpC = new javax.swing.JCheckBox();
        ipC = new javax.swing.JCheckBox();
        udpC = new javax.swing.JCheckBox();
        tcpC = new javax.swing.JCheckBox();
        icmpC = new javax.swing.JCheckBox();
        ipoC = new javax.swing.JCheckBox();
        othersC = new javax.swing.JCheckBox();
        durationP = new javax.swing.JPanel();
        hhSpinner = new javax.swing.JSpinner();
        mmSpinner = new javax.swing.JSpinner();
        ssSpinner = new javax.swing.JSpinner();
        hLabel = new java.awt.Label();
        mLabel = new java.awt.Label();
        sLabel = new java.awt.Label();
        clearBtn = new javax.swing.JButton();
        okBtn = new javax.swing.JButton();
        allBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(220, 220, 220));
        setPreferredSize(new java.awt.Dimension(500, 250));

        protocolP.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createTitledBorder("Protocol")));
        protocolP.setPreferredSize(new java.awt.Dimension(220, 300));

        arpC.setText("ARP");

        ipC.setText("IP");
        ipC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipCActionPerformed(evt);
            }
        });

        udpC.setText("UDP");
        udpC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                udpCActionPerformed(evt);
            }
        });

        tcpC.setText("TCP");

        icmpC.setText("ICMP");
        icmpC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                icmpCActionPerformed(evt);
            }
        });

        ipoC.setText("Others");

        othersC.setText("Others");
        othersC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                othersCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout protocolPLayout = new javax.swing.GroupLayout(protocolP);
        protocolP.setLayout(protocolPLayout);
        protocolPLayout.setHorizontalGroup(
            protocolPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(protocolPLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(protocolPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(protocolPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(protocolPLayout.createSequentialGroup()
                            .addGroup(protocolPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ipC)
                                .addComponent(arpC))
                            .addGap(274, 274, 274))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, protocolPLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(protocolPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(protocolPLayout.createSequentialGroup()
                                    .addComponent(udpC)
                                    .addGap(18, 18, 18)
                                    .addComponent(tcpC))
                                .addGroup(protocolPLayout.createSequentialGroup()
                                    .addComponent(icmpC)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(ipoC)))
                            .addGap(152, 152, 152)))
                    .addGroup(protocolPLayout.createSequentialGroup()
                        .addComponent(othersC)
                        .addGap(75, 75, 75))))
        );
        protocolPLayout.setVerticalGroup(
            protocolPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(protocolPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(arpC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ipC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(protocolPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(udpC)
                    .addComponent(tcpC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(protocolPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(icmpC)
                    .addComponent(ipoC))
                .addGap(11, 11, 11)
                .addComponent(othersC)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        durationP.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createTitledBorder("Duration")));

        hhSpinner.setFont(new java.awt.Font("Monospaced", 0, 15)); // NOI18N

        mmSpinner.setFont(new java.awt.Font("Monospaced", 0, 15)); // NOI18N

        ssSpinner.setFont(new java.awt.Font("Monospaced", 0, 15)); // NOI18N

        hLabel.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        hLabel.setText("HH :");

        mLabel.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        mLabel.setText("MM :");

        sLabel.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        sLabel.setText("SS :");

        javax.swing.GroupLayout durationPLayout = new javax.swing.GroupLayout(durationP);
        durationP.setLayout(durationPLayout);
        durationPLayout.setHorizontalGroup(
            durationPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(durationPLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(durationPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(durationPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(hhSpinner)
                    .addComponent(mmSpinner)
                    .addComponent(ssSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        durationPLayout.setVerticalGroup(
            durationPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(durationPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(durationPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(hLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hhSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(durationPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mmSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(durationPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ssSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        okBtn.setText("OK");
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        allBtn.setText("Select All");
        allBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(protocolP, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(allBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(durationP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(durationP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearBtn)
                    .addComponent(okBtn)
                    .addComponent(allBtn))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(protocolP, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void udpCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_udpCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_udpCActionPerformed

    private void ipCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipCActionPerformed
        if(ipC.isSelected()){
            udpC.setEnabled(true);
            tcpC.setEnabled(true);
            icmpC.setEnabled(true);
            ipoC.setEnabled(true);        
        }
        else{
            udpC.setEnabled(false);
            tcpC.setEnabled(false);
            icmpC.setEnabled(false);
            ipoC.setEnabled(false);
        }
    }//GEN-LAST:event_ipCActionPerformed

    private void icmpCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_icmpCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_icmpCActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        arpC.setSelected(false);
        ipC.setSelected(false);
        icmpC.setSelected(false);
        tcpC.setSelected(false);
        udpC.setSelected(false);
        othersC.setSelected(false);
        ipoC.setSelected(false);
        
        udpC.setEnabled(false);
        tcpC.setEnabled(false);
        icmpC.setEnabled(false);
        ipoC.setEnabled(false);
        
        hhSpinner.setValue(0);
        mmSpinner.setValue(0);
        ssSpinner.setValue(0);
    }//GEN-LAST:event_clearBtnActionPerformed

    private void othersCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_othersCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_othersCActionPerformed

    private void allBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allBtnActionPerformed
        arpC.setSelected(true);
        ipC.setSelected(true);
        othersC.setSelected(true);
        ipCActionPerformed(evt);
    }//GEN-LAST:event_allBtnActionPerformed

    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
        int hrs = (Integer) hhSpinner.getValue();
        int mins = (Integer) mmSpinner.getValue();
        int secs = (Integer) ssSpinner.getValue();
        long interval = secs + (mins * 60) + (hrs * 60 * 60);

        boolean arpval = arpC.isSelected();
        boolean ipval = ipC.isSelected();
        boolean udpval = udpC.isSelected();
        boolean tcpval = tcpC.isSelected();
        boolean icmpval = icmpC.isSelected();
        boolean ipoval = ipoC.isSelected();
        boolean othersval = othersC.isSelected();

        String query = "select * from packets where protocol in(";
        if (!arpval && !ipval && !othersval) {
            JOptionPane.showMessageDialog(this,
                    "Please select one or more protocols!",
                    "No Protocol Selected",
                    JOptionPane.WARNING_MESSAGE);
        } else {
            //Find start,end time + Insert to packets
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Calendar calendar = Calendar.getInstance();
            String stime = sdf.format(calendar.getTime());

            for (long stop = System.nanoTime() + TimeUnit.SECONDS.toNanos(interval); stop > System.nanoTime();) {
                Dataset dset = new Dataset();
            }

            calendar = Calendar.getInstance();
            String etime = sdf.format(calendar.getTime());

            //Insert to meta
            DB db = new DB();
            db.insertMeta(stime, etime, interval);

            //Run query
            if (arpval) {
                query = query + "'ARP',";
            }
            if (othersval) {
                query = query + "'--',";
            }

            if (ipval) {
                if (!ipoval && !udpval && !tcpval && !icmpval) {
                    query = query + "'TCP','ICMP','UDP','',";
                } else {
                    if (udpval) {
                        query = query + "'UDP',";
                    }
                    if (tcpval) {
                        query = query + "'TCP',";
                    }
                    if (icmpval) {
                        query = query + "'ICMP',";
                    }
                    if (ipoval) {
                        query = query + "'',";
                    }
                }
            }
            query = query.substring(0, query.length() - 1)
                    + ") and timestamp between '" + stime + "' and '" + etime + "'";

            System.out.println(query);
            ArrayList<String> str = new ArrayList<String>();
            str.add(query);
            OpFrame O = new OpFrame(query,str); //<<<<<<<UNCOMMENT THIS
        }
    }//GEN-LAST:event_okBtnActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IpFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IpFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IpFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IpFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IpFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allBtn;
    private javax.swing.JCheckBox arpC;
    private javax.swing.JButton clearBtn;
    private javax.swing.JPanel durationP;
    private java.awt.Label hLabel;
    private javax.swing.JSpinner hhSpinner;
    private javax.swing.JCheckBox icmpC;
    private javax.swing.JCheckBox ipC;
    private javax.swing.JCheckBox ipoC;
    private java.awt.Label mLabel;
    private javax.swing.JSpinner mmSpinner;
    private javax.swing.JButton okBtn;
    private javax.swing.ButtonGroup optionsGroup;
    private javax.swing.JCheckBox othersC;
    private javax.swing.JPanel protocolP;
    private java.awt.Label sLabel;
    private javax.swing.JSpinner ssSpinner;
    private javax.swing.JCheckBox tcpC;
    private javax.swing.JCheckBox udpC;
    // End of variables declaration//GEN-END:variables
}
